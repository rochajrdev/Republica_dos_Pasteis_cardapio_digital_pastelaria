// Declaração de variáveis globais
let menu, cartBtn, cartModal, cartItemsContainer, cartTotal, checkoutBtn, 
    closeModalBtn, cartCounter, addressInput, addressWarn, paymentMethod, paymentWarn;

// Carrinho de compras
let cart = [];

// Função para inicializar elementos do DOM
function initElements() {
    console.log("Inicializando elementos DOM");
    // Inicialização de elementos essenciais
    menu = document.getElementById("menu");
    cartBtn = document.getElementById("cart-btn");
    cartModal = document.getElementById("cart-modal");
    cartItemsContainer = document.getElementById("cart-items");
    cartTotal = document.getElementById("cart-total");
    checkoutBtn = document.getElementById("checkout-btn");
    closeModalBtn = document.getElementById("close-modal-btn");
    cartCounter = document.getElementById("cart-count");
    addressInput = document.getElementById("address");
    addressWarn = document.getElementById("address-warn");
    paymentMethod = document.getElementById("payment-method");
    paymentWarn = document.getElementById("payment-warn");
    
    // Debug - verificar se encontrou o botão
    console.log("Botão do carrinho:", cartBtn);
    console.log("Modal do carrinho:", cartModal);
    
    // Verificar cada elemento essencial e tentar alternativas se necessário
    if (!cartBtn) {
        console.warn("Botão do carrinho não encontrado pelo ID, tentando seletor alternativo");
        cartBtn = document.querySelector("button[aria-label='Ver carrinho de compras']");
        console.log("Botão encontrado com seletor alternativo:", cartBtn);
    }
    
    if (!cartModal) {
        console.warn("Modal do carrinho não encontrado");
    }
    
    if (!cartItemsContainer) {
        console.warn("Container de itens do carrinho não encontrado");
    }
    
    // Iniciar os listeners de eventos
    setupEventListeners();
}

// Configurar listeners de eventos
function setupEventListeners() {
    // Abrir o modal do carrinho
    if (cartBtn) {
        console.log("Adicionando evento de clique ao botão do carrinho");
        
        // Remover eventos anteriores para evitar duplicação
        cartBtn.removeEventListener("click", openCartModal);
        
        // Adicionar evento com função nomeada para poder removê-la se necessário
        cartBtn.addEventListener("click", openCartModal);
    } else {
        console.error('Botão do carrinho não encontrado');
    }
    
    // Fechar o modal quando clicar fora
    if (cartModal) {
        cartModal.addEventListener("click", function(event){
            if(event.target === cartModal){
                closeCartModal();
            }
        });
    }

    // Botão de fechar o modal do carrinho
    if (closeModalBtn) {
        closeModalBtn.addEventListener("click", function(){
            closeCartModal();
        });
    }
}

// Função para abrir o modal do carrinho
function openCartModal(e) {
    console.log("Clique no botão do carrinho detectado");
    if (e) e.preventDefault();
    
    // Verificar novamente se todos os elementos estão disponíveis
    if (!cartModal) {
        console.error("Modal do carrinho não encontrado ao tentar abrir");
        return;
    }
    
    // Atualizar e mostrar o modal
    updateCartModal();
    cartModal.style.display = "flex";
    document.body.style.overflow = 'hidden'; // Previne scroll na página
    
    // Atualizar atributo aria-expanded para acessibilidade
    if (cartBtn) cartBtn.setAttribute('aria-expanded', 'true');
    
    // Adicionar classe para animar entrada
    cartModal.querySelector('.animate-slide-up')?.classList.add('animate-slide-up');
    
    // Foco no botão de fechar para melhor acessibilidade
    if (closeModalBtn) setTimeout(() => closeModalBtn.focus(), 100);
    
    // Anuncia para leitores de tela
    announceScreenReaderMessage('Carrinho de compras aberto');
}

// Inicializar quando o DOM for carregado
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM carregado, inicializando elementos");
    
    // Log para elementos importantes antes da inicialização
    console.log("Verificando elementos antes da inicialização:");
    console.log("- Botão do carrinho existe:", !!document.getElementById("cart-btn"));
    console.log("- Modal do carrinho existe:", !!document.getElementById("cart-modal"));
    
    // Inicializar elementos do DOM
    initElements();
    
    // Log para confirmar após inicialização
    console.log("Após inicialização:");
    console.log("- cartBtn inicializado:", !!cartBtn);
    console.log("- cartModal inicializado:", !!cartModal);
    
    // Carregar carrinho do localStorage
    cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    // Atualizar informações do carrinho
    updateCartModal();
    
    // Iniciar verificação de status do restaurante
    updateRestaurantStatus();
    
    // Garantir que eventos de clique funcionem
    if (cartBtn) {
        console.log("Reforçando evento de clique no botão do carrinho");
        
        // Mostrar evento direto para depuração
        cartBtn.onclick = function(e) {
            console.log("Clique direto no botão do carrinho através de onclick");
            openCartModal(e);
        };
    }
});

// Fechar com ESC e gerenciar acessibilidade com teclado
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && cartModal.style.display === 'flex') {
        closeCartModal();
    }
    
    // Manter o foco dentro do modal (trap focus)
    if (e.key === 'Tab' && cartModal.style.display === 'flex') {
        const focusableElements = cartModal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        if (e.shiftKey && document.activeElement === firstElement) {
            e.preventDefault();
            lastElement.focus();
        } else if (!e.shiftKey && document.activeElement === lastElement) {
            e.preventDefault();
            firstElement.focus();
        }
    }
});

// Função para fechar o modal do carrinho
function closeCartModal() {
    if (cartModal) {
        // Aplicar uma transição suave de saída
        const modalContent = cartModal.querySelector('.animate-slide-up');
        if (modalContent) {
            // Adicionar classe de animação de saída
            modalContent.classList.add('closing');
            modalContent.style.opacity = '0';
            modalContent.style.transform = 'translateY(20px)';
            
            // Aguardar a animação antes de ocultar
            setTimeout(() => {
                cartModal.style.display = "none";
                document.body.style.overflow = '';
                
                // Resetar o estilo para a próxima abertura
                modalContent.classList.remove('closing');
                modalContent.style.opacity = '';
                modalContent.style.transform = '';
            }, 200);
        } else {
            // Fallback se não encontrou o elemento para animar
            cartModal.style.display = "none";
            document.body.style.overflow = '';
        }
        
        // Atualizar atributo aria-expanded para acessibilidade
        if (cartBtn) {
            cartBtn.setAttribute('aria-expanded', 'false');
            cartBtn.focus(); // Retorna o foco para o botão do carrinho
        }
        
        announceScreenReaderMessage('Carrinho de compras fechado');
    }
}

// Função para anunciar mensagens para leitores de tela
function announceScreenReaderMessage(message) {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'assertive');
    announcement.classList.add('sr-only');
    announcement.textContent = message;
    document.body.appendChild(announcement);
    
    setTimeout(() => document.body.removeChild(announcement), 3000);
}

// Melhoria na funcionalidade do controle de quantidade para acessibilidade
document.addEventListener('keydown', function(e) {
    if ((e.key === 'Enter' || e.key === ' ') && 
        (e.target.classList.contains('quantity-btn') || e.target.classList.contains('cart-quantity-btn'))) {
        e.preventDefault();
        e.target.click();
    }
});

// Controle de quantidade
document.querySelectorAll('.quantity-btn').forEach(button => {
    button.addEventListener('click', (e) => {
        const action = e.currentTarget.dataset.action;
        const display = e.currentTarget.parentNode.querySelector('.quantity-display');
        let quantity = parseInt(display.textContent);
        const oldQuantity = quantity;

        if (action === 'increase') {
            quantity = Math.min(quantity + 1, 10); // Limita a 10 itens
        } else if (action === 'decrease') {
            quantity = Math.max(quantity - 1, 1); // Não permite menos que 1
        }

        display.textContent = quantity;
        
        // Anuncia para leitores de tela
        if (quantity !== oldQuantity) {
            const productName = button.closest('.menu-item').querySelector('h3, p.font-bold').textContent;
            announceScreenReaderMessage(`Quantidade de ${productName} alterada para ${quantity}`);
        }
    });
});

// Modificar a função que adiciona ao carrinho para considerar a quantidade
document.querySelectorAll('.add-to-cart-btn').forEach(button => {
    button.addEventListener('click', () => {
        // Encontrar o display de quantidade mais próximo
        const quantityDisplay = button.parentNode.querySelector('.quantity-display');
        const quantity = parseInt(quantityDisplay.textContent);
        
        const name = button.dataset.name;
        const price = parseFloat(button.dataset.price);
        const total = price * quantity;

        // Adicionar ao carrinho com a quantidade selecionada
        addToCart(name, price, quantity);

        // Mostrar notificação
        Toastify({
            text: `${quantity}x ${name} adicionado ao carrinho!`,
            duration: 3000,
            gravity: "top",
            position: "right",
            style: {
                background: "linear-gradient(to right, #00b09b, #96c93d)",
            }
        }).showToast();
    });
});

// Adicionar no carrinho
/*
menu.addEventListener("click", function(event){
    let parentButton = event.target.closest(".add-to-cart-btn")
    if(parentButton){
        const name = parentButton.getAttribute("data-name")
        const price = parseFloat(parentButton.getAttribute("data-price"))
        addToCart(name, price)
    }
})
*/

// Função modificada para adicionar ao carrinho com animações e feedback
function addToCart(name, price, quantity = 1) {
    // Inicialize cart como array global
    cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    const existingItem = cart.find(item => item.name === name);
    const isNewItem = !existingItem;
    
    if (existingItem) {
        existingItem.quantity += quantity;
        existingItem.total = existingItem.quantity * existingItem.price;
    } else {
        cart.push({
            name,
            price,
            quantity,
            total: price * quantity
        });
    }
    
    // Salvar no localStorage e atualizar interface
    localStorage.setItem('cart', JSON.stringify(cart));
    updateCartModal();
    
    // Animação do contador do carrinho
    animateCartCounter();
    
    // Feedback sonoro
    playFeedbackSound('add');
    
    // Feedback visual
    Toastify({
        text: isNewItem 
            ? `${name} adicionado ao carrinho!` 
            : `${name}: quantidade atualizada (${existingItem.quantity})`,
        duration: 3000,
        gravity: "bottom",
        position: "right",
        style: {
            background: "#22c55e",
            boxShadow: "0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)"
        }
    }).showToast();
    
    // Anúncio para leitores de tela
    const message = isNewItem 
        ? `${name} adicionado ao carrinho.` 
        : `${name}: quantidade atualizada para ${existingItem.quantity} unidades.`;
    announceScreenReaderMessage(message);
    
    // Efeito visual no botão do carrinho
    if (cartBtn) {
        cartBtn.classList.add('ring-2', 'ring-white');
        setTimeout(() => {
            cartBtn.classList.remove('ring-2', 'ring-white');
        }, 1000);
    }
}

// Função melhorada para atualizar informações do contador do carrinho
function updateCartInfo() {
    const cartCount = cart.reduce((total, item) => total + item.quantity, 0);
    
    // Atualizar o número exibido com transição suave
    if (cartCounter) {
        // Animação para mudança de valor
        const oldValue = parseInt(cartCounter.innerText) || 0;
        if (oldValue !== cartCount) {
            // Aplicar classe para animar a mudança
            cartCounter.classList.add('cart-count-updating');
            
            // Atualizar o valor
            cartCounter.innerText = cartCount;
            
            // Remover classe após animação
            setTimeout(() => {
                cartCounter.classList.remove('cart-count-updating');
            }, 500);
        } else {
            // Sem animação para o mesmo valor
            cartCounter.innerText = cartCount;
        }
        
        // Destacar visualmente quando houver itens
        if (cartCount > 0) {
            // Adicionar estilo para indicar carrinho com itens
            cartCounter.classList.add('bg-white', 'text-orange-600');
            cartCounter.classList.remove('bg-gray-200', 'text-gray-500');
            
            if (cartBtn) {
                cartBtn.setAttribute('aria-label', `Ver carrinho de compras (${cartCount} ${cartCount === 1 ? 'item' : 'itens'})`);
            }
        } else {
            // Estilo para carrinho vazio
            cartCounter.classList.add('bg-gray-200', 'text-gray-500');
            cartCounter.classList.remove('bg-white', 'text-orange-600');
            
            if (cartBtn) {
                cartBtn.setAttribute('aria-label', 'Ver carrinho de compras (vazio)');
            }
        }
    }
}

// Atualizar a exibição do carrinho para mostrar quantidades
function updateCartModal() {
    if (!cartItemsContainer) {
        console.error("O container de itens do carrinho não foi encontrado");
        return;
    }
    
    // Limpar o conteúdo atual do carrinho
    cartItemsContainer.innerHTML = '';
    let totalAmount = 0;
      
    // Adicionar botão "Limpar carrinho" se houver itens
    if (cart && cart.length > 0) {
        const clearCartContainer = document.createElement('div');
        clearCartContainer.className = 'flex justify-end mb-2';
        clearCartContainer.innerHTML = `
            <button 
                id="clear-cart-btn" 
                class="clear-cart-btn text-gray-500 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400 text-sm flex items-center"
                aria-label="Remover todos os itens do carrinho"
                title="Limpar carrinho">
                <i class="fas fa-trash-alt mr-1"></i>
                Limpar carrinho
            </button>
        `;
        cartItemsContainer.appendChild(clearCartContainer);
        
        // Adicionar evento ao botão de limpar carrinho
        const clearBtn = document.getElementById('clear-cart-btn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                clearCart();
            });
        }
    }
    
    if (!cart || cart.length === 0) {
        // Mensagem para carrinho vazio com estilo consistente
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'empty-cart-indicator flex flex-col items-center justify-center py-8 text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded-lg border border-dashed border-gray-300 dark:border-gray-700 animate-fade-in';
        emptyMessage.innerHTML = `
            <div class="bg-orange-100 dark:bg-orange-900/30 p-4 rounded-full mb-4">
                <i class="fas fa-shopping-cart text-4xl text-orange-500 dark:text-orange-400"></i>
            </div>
            <p class="text-lg font-medium">Seu carrinho está vazio</p>
            <p class="text-sm mt-1 max-w-xs text-center">Adicione itens do cardápio para fazer seu pedido</p>
            <button class="mt-4 px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors" 
                onclick="closeCartModal()" aria-label="Continuar comprando">
                <i class="fas fa-utensils mr-2"></i>Ver cardápio
            </button>
        `;
        cartItemsContainer.appendChild(emptyMessage);
    } else {
        cart.forEach(item => {
            const itemElement = document.createElement('div');
            // Aplicar estilos consistentes aos itens do carrinho com classes melhoradas
            itemElement.className = 'cart-item flex gap-4 p-4 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 mb-4 shadow-md hover:shadow-xl transition-all';
            itemElement.setAttribute('data-name', item.name);
            
            // Determinar qual imagem mostrar com base no nome do item
            let imageSrc = './assets/pastel.jpg';
            let imageAlt = 'Pastel';
            
            if (item.name.toLowerCase().includes('coca') || item.name.toLowerCase().includes('cola')) {
                imageSrc = './assets/refri-1.png';
                imageAlt = 'Coca-Cola';
            } else if (item.name.toLowerCase().includes('guaran') || item.name.toLowerCase().includes('soda') || 
                      item.name.toLowerCase().includes('refri')) {
                imageSrc = './assets/refri-2.png';
                imageAlt = 'Refrigerante';
            } else if (item.name.toLowerCase().includes('cuscuz')) {
                imageSrc = './assets/cuscuz.jpg';
                imageAlt = 'Cuscuz';
            }
            
            // HTML melhorado para os itens do carrinho
            itemElement.innerHTML = `
                <div class="relative cart-image-container">
                    <img 
                        src="${imageSrc}" 
                        alt="${imageAlt}" 
                        class="cart-item-image w-24 h-24 md:w-28 md:h-28 object-cover rounded-md shadow-md"
                        loading="lazy"
                    />
                    <span class="absolute -top-2 -right-2 bg-orange-500 text-white w-6 h-6 flex items-center justify-center rounded-full text-xs font-bold shadow-sm">
                        ${item.quantity}
                    </span>
                </div>
                <div class="w-full">
                    <h4 class="font-bold text-lg text-gray-900 dark:text-gray-100">${item.name}</h4>
                    <p class="text-sm text-gray-600 dark:text-gray-300">Preço unitário: <span class="font-medium">R$ ${parseFloat(item.price).toFixed(2)}</span></p>
                    
                    <div class="flex items-center gap-2 justify-between mt-3">
                        <p class="font-bold text-lg text-orange-600 dark:text-orange-400">
                            Total: R$ ${(item.price * item.quantity).toFixed(2)}
                        </p>
                        <div class="flex items-center gap-3">
                            <div class="cart-quantity-control flex items-center bg-gray-100 dark:bg-gray-700 rounded-lg shadow-sm border border-gray-200 dark:border-gray-600" role="group" aria-label="Ajustar quantidade de ${item.name}">
                                <button 
                                    class="cart-action-btn px-3 py-2 text-orange-600 dark:text-orange-400 cart-quantity-btn hover:bg-gray-200 dark:hover:bg-gray-600 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-orange-500 font-bold" 
                                    data-action="decrease"
                                    data-name="${item.name}"
                                    aria-label="Diminuir quantidade de ${item.name}"
                                    title="Diminuir quantidade">
                                    <i class="fas fa-minus" aria-hidden="true"></i>
                                </button>
                                <span class="cart-quantity-display px-4 py-1 font-bold text-base" aria-live="polite">${item.quantity}</span>
                                <button 
                                    class="cart-action-btn px-3 py-2 text-orange-600 dark:text-orange-400 cart-quantity-btn hover:bg-gray-200 dark:hover:bg-gray-600 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-orange-500 font-bold" 
                                    data-action="increase"
                                    data-name="${item.name}"
                                    aria-label="Aumentar quantidade de ${item.name}"
                                    title="Aumentar quantidade">
                                    <i class="fas fa-plus" aria-hidden="true"></i>
                                </button>
                            </div>
                            <button 
                                class="cart-action-btn remove-from-cart-btn bg-red-500 hover:bg-red-600 text-white p-2.5 rounded-lg transition-all focus:outline-none focus:ring-2 focus:ring-red-500 shadow hover:shadow-lg transform hover:scale-105 active:scale-95" 
                                data-name="${item.name}"
                                aria-label="Remover ${item.name} do carrinho"
                                title="Remover item">
                                <i class="fa fa-trash" aria-hidden="true"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            cartItemsContainer.appendChild(itemElement);
            totalAmount += item.price * item.quantity;
        });
    }
    
    // Atualizar o valor total no elemento cartTotal
    if (cartTotal) {
        cartTotal.innerText = totalAmount.toFixed(2);
    }
    
    // Atualizar o contador do carrinho (ícone, etc.)
    updateCartInfo();
    
    // Tentar atualizar o resumo do pedido, se a seção existir
    try {
        const orderSummaryContainer = document.getElementById('order-summary-container');
        if (orderSummaryContainer && typeof generateOrderSummary === 'function') {
            orderSummaryContainer.innerHTML = generateOrderSummary();
            // Configurar interações na tabela de resumo do pedido
            setupOrderSummaryInteraction();
        }
    } catch (err) {
        console.warn('Erro ao atualizar resumo do pedido:', err);
    }
    
    // Desabilitar botão de checkout se o carrinho estiver vazio
    if (checkoutBtn) {
        if (!cart || cart.length === 0) {
            checkoutBtn.disabled = true;
            checkoutBtn.classList.add('opacity-50', 'cursor-not-allowed');
        } else {
            checkoutBtn.disabled = false;
            checkoutBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        }
    }
}

// Função para gerar o resumo do pedido antes da finalização
function generateOrderSummary() {
    if (!cart || cart.length === 0) {
        // Retornar uma mensagem de carrinho vazio
        return `
            <div class="order-summary rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-6 mb-4 shadow-sm">
                <div class="empty-order-summary flex flex-col items-center justify-center py-6">
                    <div class="bg-orange-100 dark:bg-orange-900/30 p-4 rounded-full mb-4 animate-pulse">
                        <i class="fas fa-clipboard-check text-3xl text-orange-500 dark:text-orange-400"></i>
                    </div>
                    <p class="text-lg font-medium text-gray-700 dark:text-gray-300">Nenhum item no carrinho</p>
                    <p class="text-sm mt-1 max-w-xs text-center text-gray-500 dark:text-gray-400">Adicione itens do cardápio para visualizar seu pedido</p>
                </div>
            </div>
        `;
    }
    
    let summaryHTML = `
        <div class="order-summary rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-4 mb-4 shadow-sm">
            <h4 class="text-lg font-medium mb-3 flex items-center text-gray-800 dark:text-gray-200">
                <i class="fas fa-clipboard-list text-orange-500 mr-2" aria-hidden="true"></i>
                Resumo do Pedido
            </h4>
            
            <div class="order-items-container max-h-64 overflow-y-auto mb-3 pr-1" 
                 style="scrollbar-width: thin; scrollbar-color: #f97316 #e5e7eb;">
                <table class="w-full text-left">
                    <thead class="bg-gray-100 dark:bg-gray-700 sticky top-0 z-10">
                        <tr>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2">Item</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-center w-16">Qtd</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-right">Preço Unit.</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-right">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 dark:divide-gray-600">
    `;
    
    // Adicionar cada item do carrinho ao resumo
    cart.forEach(item => {
        const unitPrice = parseFloat(item.price).toFixed(2);
        const itemTotal = (item.price * item.quantity).toFixed(2);
        
        summaryHTML += `
            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
                <td class="px-3 py-2.5 text-sm text-gray-800 dark:text-gray-200 font-medium">${item.name}</td>
                <td class="px-3 py-2.5 text-sm text-center text-gray-800 dark:text-gray-200 font-medium">${item.quantity}</td>
                <td class="px-3 py-2.5 text-sm text-right text-gray-600 dark:text-gray-400">R$ ${unitPrice}</td>
                <td class="px-3 py-2.5 text-sm text-right text-orange-600 dark:text-orange-400 font-medium">R$ ${itemTotal}</td>
            </tr>
        `;
    });
    
    // Calcular o valor total
    const totalAmount = cart.reduce((total, item) => total + (item.price * item.quantity), 0).toFixed(2);
    
    summaryHTML += `
                    </tbody>
                </table>
            </div>
            
            <div class="flex justify-between items-center border-t border-gray-200 dark:border-gray-700 pt-3 mt-1">
                <span class="font-bold text-base text-gray-700 dark:text-gray-300">Total do Pedido:</span>
                <span class="font-bold text-xl text-orange-600 dark:text-orange-400">R$ ${totalAmount}</span>
            </div>
        </div>
    `;
    
    return summaryHTML;
}

// Função para destacar linha da tabela quando o usuário passar o mouse
function setupOrderSummaryInteraction() {
    const rows = document.querySelectorAll('.order-items-container tbody tr');
    
    rows.forEach(row => {
        // Destacar a linha ao passar o mouse
        row.addEventListener('mouseenter', function() {
            this.classList.add('bg-orange-50', 'dark:bg-orange-900/20');
        });
        
        row.addEventListener('mouseleave', function() {
            this.classList.remove('bg-orange-50', 'dark:bg-orange-900/20');
        });
        
        // Efeito de clique para feedback visual (opcional)
        row.addEventListener('click', function() {
            const itemName = this.querySelector('td:first-child').textContent;
            
            // Flash effect
            this.classList.add('bg-orange-100', 'dark:bg-orange-900/30');
            setTimeout(() => {
                this.classList.remove('bg-orange-100', 'dark:bg-orange-900/30');
            }, 200);
            
            // Anunciar para leitores de tela
            announceScreenReaderMessage(`Item selecionado: ${itemName}`);
        });
    });
}

// Chamar a função de interação da tabela após atualizar o modal do carrinho
function updateCartModal() {
    if (!cartItemsContainer) {
        console.error("O container de itens do carrinho não foi encontrado");
        return;
    }
    
    // Limpar o conteúdo atual do carrinho
    cartItemsContainer.innerHTML = '';
    let totalAmount = 0;
      
    // Adicionar botão "Limpar carrinho" se houver itens
    if (cart && cart.length > 0) {
        const clearCartContainer = document.createElement('div');
        clearCartContainer.className = 'flex justify-end mb-2';
        clearCartContainer.innerHTML = `
            <button 
                id="clear-cart-btn" 
                class="clear-cart-btn text-gray-500 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400 text-sm flex items-center"
                aria-label="Remover todos os itens do carrinho"
                title="Limpar carrinho">
                <i class="fas fa-trash-alt mr-1"></i>
                Limpar carrinho
            </button>
        `;
        cartItemsContainer.appendChild(clearCartContainer);
        
        // Adicionar evento ao botão de limpar carrinho
        const clearBtn = document.getElementById('clear-cart-btn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                clearCart();
            });
        }
    }
    
    if (!cart || cart.length === 0) {
        // Mensagem para carrinho vazio com estilo consistente
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'empty-cart-indicator flex flex-col items-center justify-center py-8 text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded-lg border border-dashed border-gray-300 dark:border-gray-700 animate-fade-in';
        emptyMessage.innerHTML = `
            <div class="bg-orange-100 dark:bg-orange-900/30 p-4 rounded-full mb-4">
                <i class="fas fa-shopping-cart text-4xl text-orange-500 dark:text-orange-400"></i>
            </div>
            <p class="text-lg font-medium">Seu carrinho está vazio</p>
            <p class="text-sm mt-1 max-w-xs text-center">Adicione itens do cardápio para fazer seu pedido</p>
            <button class="mt-4 px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors" 
                onclick="closeCartModal()" aria-label="Continuar comprando">
                <i class="fas fa-utensils mr-2"></i>Ver cardápio
            </button>
        `;
        cartItemsContainer.appendChild(emptyMessage);
    } else {
        cart.forEach(item => {
            const itemElement = document.createElement('div');
            // Aplicar estilos consistentes aos itens do carrinho com classes melhoradas
            itemElement.className = 'cart-item flex gap-4 p-4 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 mb-4 shadow-md hover:shadow-xl transition-all';
            itemElement.setAttribute('data-name', item.name);
            
            // Determinar qual imagem mostrar com base no nome do item
            let imageSrc = './assets/pastel.jpg';
            let imageAlt = 'Pastel';
            
            if (item.name.toLowerCase().includes('coca') || item.name.toLowerCase().includes('cola')) {
                imageSrc = './assets/refri-1.png';
                imageAlt = 'Coca-Cola';
            } else if (item.name.toLowerCase().includes('guaran') || item.name.toLowerCase().includes('soda') || 
                      item.name.toLowerCase().includes('refri')) {
                imageSrc = './assets/refri-2.png';
                imageAlt = 'Refrigerante';
            } else if (item.name.toLowerCase().includes('cuscuz')) {
                imageSrc = './assets/cuscuz.jpg';
                imageAlt = 'Cuscuz';
            }
            
            // HTML melhorado para os itens do carrinho
            itemElement.innerHTML = `
                <div class="relative cart-image-container">
                    <img 
                        src="${imageSrc}" 
                        alt="${imageAlt}" 
                        class="cart-item-image w-24 h-24 md:w-28 md:h-28 object-cover rounded-md shadow-md"
                        loading="lazy"
                    />
                    <span class="absolute -top-2 -right-2 bg-orange-500 text-white w-6 h-6 flex items-center justify-center rounded-full text-xs font-bold shadow-sm">
                        ${item.quantity}
                    </span>
                </div>
                <div class="w-full">
                    <h4 class="font-bold text-lg text-gray-900 dark:text-gray-100">${item.name}</h4>
                    <p class="text-sm text-gray-600 dark:text-gray-300">Preço unitário: <span class="font-medium">R$ ${parseFloat(item.price).toFixed(2)}</span></p>
                    
                    <div class="flex items-center gap-2 justify-between mt-3">
                        <p class="font-bold text-lg text-orange-600 dark:text-orange-400">
                            Total: R$ ${(item.price * item.quantity).toFixed(2)}
                        </p>
                        <div class="flex items-center gap-3">
                            <div class="cart-quantity-control flex items-center bg-gray-100 dark:bg-gray-700 rounded-lg shadow-sm border border-gray-200 dark:border-gray-600" role="group" aria-label="Ajustar quantidade de ${item.name}">
                                <button 
                                    class="cart-action-btn px-3 py-2 text-orange-600 dark:text-orange-400 cart-quantity-btn hover:bg-gray-200 dark:hover:bg-gray-600 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-orange-500 font-bold" 
                                    data-action="decrease"
                                    data-name="${item.name}"
                                    aria-label="Diminuir quantidade de ${item.name}"
                                    title="Diminuir quantidade">
                                    <i class="fas fa-minus" aria-hidden="true"></i>
                                </button>
                                <span class="cart-quantity-display px-4 py-1 font-bold text-base" aria-live="polite">${item.quantity}</span>
                                <button 
                                    class="cart-action-btn px-3 py-2 text-orange-600 dark:text-orange-400 cart-quantity-btn hover:bg-gray-200 dark:hover:bg-gray-600 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-orange-500 font-bold" 
                                    data-action="increase"
                                    data-name="${item.name}"
                                    aria-label="Aumentar quantidade de ${item.name}"
                                    title="Aumentar quantidade">
                                    <i class="fas fa-plus" aria-hidden="true"></i>
                                </button>
                            </div>
                            <button 
                                class="cart-action-btn remove-from-cart-btn bg-red-500 hover:bg-red-600 text-white p-2.5 rounded-lg transition-all focus:outline-none focus:ring-2 focus:ring-red-500 shadow hover:shadow-lg transform hover:scale-105 active:scale-95" 
                                data-name="${item.name}"
                                aria-label="Remover ${item.name} do carrinho"
                                title="Remover item">
                                <i class="fa fa-trash" aria-hidden="true"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            cartItemsContainer.appendChild(itemElement);
            totalAmount += item.price * item.quantity;
        });
    }
    
    // Atualizar o valor total no elemento cartTotal
    if (cartTotal) {
        cartTotal.innerText = totalAmount.toFixed(2);
    }
    
    // Atualizar o contador do carrinho (ícone, etc.)
    updateCartInfo();
    
    // Tentar atualizar o resumo do pedido, se a seção existir
    try {
        const orderSummaryContainer = document.getElementById('order-summary-container');
        if (orderSummaryContainer && typeof generateOrderSummary === 'function') {
            orderSummaryContainer.innerHTML = generateOrderSummary();
        }
    } catch (err) {
        console.warn('Erro ao atualizar resumo do pedido:', err);
    }
    
    // Desabilitar botão de checkout se o carrinho estiver vazio
    if (checkoutBtn) {
        if (!cart || cart.length === 0) {
            checkoutBtn.disabled = true;
            checkoutBtn.classList.add('opacity-50', 'cursor-not-allowed');
        } else {
            checkoutBtn.disabled = false;
            checkoutBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        }
    }
}

// Função para gerar o resumo do pedido antes da finalização
function generateOrderSummary() {
    if (!cart || cart.length === 0) {
        // Retornar uma mensagem de carrinho vazio
        return `
            <div class="order-summary rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-6 mb-4 shadow-sm">
                <div class="empty-order-summary flex flex-col items-center justify-center py-6">
                    <div class="bg-orange-100 dark:bg-orange-900/30 p-4 rounded-full mb-4 animate-pulse">
                        <i class="fas fa-clipboard-check text-3xl text-orange-500 dark:text-orange-400"></i>
                    </div>
                    <p class="text-lg font-medium text-gray-700 dark:text-gray-300">Nenhum item no carrinho</p>
                    <p class="text-sm mt-1 max-w-xs text-center text-gray-500 dark:text-gray-400">Adicione itens do cardápio para visualizar seu pedido</p>
                </div>
            </div>
        `;
    }
    
    let summaryHTML = `
        <div class="order-summary rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-4 mb-4 shadow-sm">
            <h4 class="text-lg font-medium mb-3 flex items-center text-gray-800 dark:text-gray-200">
                <i class="fas fa-clipboard-list text-orange-500 mr-2" aria-hidden="true"></i>
                Resumo do Pedido
            </h4>
            
            <div class="order-items-container max-h-64 overflow-y-auto mb-3 pr-1" 
                 style="scrollbar-width: thin; scrollbar-color: #f97316 #e5e7eb;">
                <table class="w-full text-left">
                    <thead class="bg-gray-100 dark:bg-gray-700 sticky top-0 z-10">
                        <tr>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2">Item</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-center w-16">Qtd</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-right">Preço Unit.</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-right">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 dark:divide-gray-600">
    `;
    
    // Adicionar cada item do carrinho ao resumo
    cart.forEach(item => {
        const unitPrice = parseFloat(item.price).toFixed(2);
        const itemTotal = (item.price * item.quantity).toFixed(2);
        
        summaryHTML += `
            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
                <td class="px-3 py-2.5 text-sm text-gray-800 dark:text-gray-200 font-medium">${item.name}</td>
                <td class="px-3 py-2.5 text-sm text-center text-gray-800 dark:text-gray-200 font-medium">${item.quantity}</td>
                <td class="px-3 py-2.5 text-sm text-right text-gray-600 dark:text-gray-400">R$ ${unitPrice}</td>
                <td class="px-3 py-2.5 text-sm text-right text-orange-600 dark:text-orange-400 font-medium">R$ ${itemTotal}</td>
            </tr>
        `;
    });
    
    // Calcular o valor total
    const totalAmount = cart.reduce((total, item) => total + (item.price * item.quantity), 0).toFixed(2);
    
    summaryHTML += `
                    </tbody>
                </table>
            </div>
            
            <div class="flex justify-between items-center border-t border-gray-200 dark:border-gray-700 pt-3 mt-1">
                <span class="font-bold text-base text-gray-700 dark:text-gray-300">Total do Pedido:</span>
                <span class="font-bold text-xl text-orange-600 dark:text-orange-400">R$ ${totalAmount}</span>
            </div>
        </div>
    `;
    
    return summaryHTML;
}

// Função para destacar linha da tabela quando o usuário passar o mouse
function setupOrderSummaryInteraction() {
    const rows = document.querySelectorAll('.order-items-container tbody tr');
    
    rows.forEach(row => {
        // Destacar a linha ao passar o mouse
        row.addEventListener('mouseenter', function() {
            this.classList.add('bg-orange-50', 'dark:bg-orange-900/20');
        });
        
        row.addEventListener('mouseleave', function() {
            this.classList.remove('bg-orange-50', 'dark:bg-orange-900/20');
        });
        
        // Efeito de clique para feedback visual (opcional)
        row.addEventListener('click', function() {
            const itemName = this.querySelector('td:first-child').textContent;
            
            // Flash effect
            this.classList.add('bg-orange-100', 'dark:bg-orange-900/30');
            setTimeout(() => {
                this.classList.remove('bg-orange-100', 'dark:bg-orange-900/30');
            }, 200);
            
            // Anunciar para leitores de tela
            announceScreenReaderMessage(`Item selecionado: ${itemName}`);
        });
    });
}

// Chamar a função de interação da tabela após atualizar o modal do carrinho
function updateCartModal() {
    if (!cartItemsContainer) {
        console.error("O container de itens do carrinho não foi encontrado");
        return;
    }
    
    // Limpar o conteúdo atual do carrinho
    cartItemsContainer.innerHTML = '';
    let totalAmount = 0;
      
    // Adicionar botão "Limpar carrinho" se houver itens
    if (cart && cart.length > 0) {
        const clearCartContainer = document.createElement('div');
        clearCartContainer.className = 'flex justify-end mb-2';
        clearCartContainer.innerHTML = `
            <button 
                id="clear-cart-btn" 
                class="clear-cart-btn text-gray-500 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400 text-sm flex items-center"
                aria-label="Remover todos os itens do carrinho"
                title="Limpar carrinho">
                <i class="fas fa-trash-alt mr-1"></i>
                Limpar carrinho
            </button>
        `;
        cartItemsContainer.appendChild(clearCartContainer);
        
        // Adicionar evento ao botão de limpar carrinho
        const clearBtn = document.getElementById('clear-cart-btn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                clearCart();
            });
        }
    }
    
    if (!cart || cart.length === 0) {
        // Mensagem para carrinho vazio com estilo consistente
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'empty-cart-indicator flex flex-col items-center justify-center py-8 text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded-lg border border-dashed border-gray-300 dark:border-gray-700 animate-fade-in';
        emptyMessage.innerHTML = `
            <div class="bg-orange-100 dark:bg-orange-900/30 p-4 rounded-full mb-4">
                <i class="fas fa-shopping-cart text-4xl text-orange-500 dark:text-orange-400"></i>
            </div>
            <p class="text-lg font-medium">Seu carrinho está vazio</p>
            <p class="text-sm mt-1 max-w-xs text-center">Adicione itens do cardápio para fazer seu pedido</p>
            <button class="mt-4 px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors" 
                onclick="closeCartModal()" aria-label="Continuar comprando">
                <i class="fas fa-utensils mr-2"></i>Ver cardápio
            </button>
        `;
        cartItemsContainer.appendChild(emptyMessage);
    } else {
        cart.forEach(item => {
            const itemElement = document.createElement('div');
            // Aplicar estilos consistentes aos itens do carrinho com classes melhoradas
            itemElement.className = 'cart-item flex gap-4 p-4 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 mb-4 shadow-md hover:shadow-xl transition-all';
            itemElement.setAttribute('data-name', item.name);
            
            // Determinar qual imagem mostrar com base no nome do item
            let imageSrc = './assets/pastel.jpg';
            let imageAlt = 'Pastel';
            
            if (item.name.toLowerCase().includes('coca') || item.name.toLowerCase().includes('cola')) {
                imageSrc = './assets/refri-1.png';
                imageAlt = 'Coca-Cola';
            } else if (item.name.toLowerCase().includes('guaran') || item.name.toLowerCase().includes('soda') || 
                      item.name.toLowerCase().includes('refri')) {
                imageSrc = './assets/refri-2.png';
                imageAlt = 'Refrigerante';
            } else if (item.name.toLowerCase().includes('cuscuz')) {
                imageSrc = './assets/cuscuz.jpg';
                imageAlt = 'Cuscuz';
            }
            
            // HTML melhorado para os itens do carrinho
            itemElement.innerHTML = `
                <div class="relative cart-image-container">
                    <img 
                        src="${imageSrc}" 
                        alt="${imageAlt}" 
                        class="cart-item-image w-24 h-24 md:w-28 md:h-28 object-cover rounded-md shadow-md"
                        loading="lazy"
                    />
                    <span class="absolute -top-2 -right-2 bg-orange-500 text-white w-6 h-6 flex items-center justify-center rounded-full text-xs font-bold shadow-sm">
                        ${item.quantity}
                    </span>
                </div>
                <div class="w-full">
                    <h4 class="font-bold text-lg text-gray-900 dark:text-gray-100">${item.name}</h4>
                    <p class="text-sm text-gray-600 dark:text-gray-300">Preço unitário: <span class="font-medium">R$ ${parseFloat(item.price).toFixed(2)}</span></p>
                    
                    <div class="flex items-center gap-2 justify-between mt-3">
                        <p class="font-bold text-lg text-orange-600 dark:text-orange-400">
                            Total: R$ ${(item.price * item.quantity).toFixed(2)}
                        </p>
                        <div class="flex items-center gap-3">
                            <div class="cart-quantity-control flex items-center bg-gray-100 dark:bg-gray-700 rounded-lg shadow-sm border border-gray-200 dark:border-gray-600" role="group" aria-label="Ajustar quantidade de ${item.name}">
                                <button 
                                    class="cart-action-btn px-3 py-2 text-orange-600 dark:text-orange-400 cart-quantity-btn hover:bg-gray-200 dark:hover:bg-gray-600 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-orange-500 font-bold" 
                                    data-action="decrease"
                                    data-name="${item.name}"
                                    aria-label="Diminuir quantidade de ${item.name}"
                                    title="Diminuir quantidade">
                                    <i class="fas fa-minus" aria-hidden="true"></i>
                                </button>
                                <span class="cart-quantity-display px-4 py-1 font-bold text-base" aria-live="polite">${item.quantity}</span>
                                <button 
                                    class="cart-action-btn px-3 py-2 text-orange-600 dark:text-orange-400 cart-quantity-btn hover:bg-gray-200 dark:hover:bg-gray-600 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-orange-500 font-bold" 
                                    data-action="increase"
                                    data-name="${item.name}"
                                    aria-label="Aumentar quantidade de ${item.name}"
                                    title="Aumentar quantidade">
                                    <i class="fas fa-plus" aria-hidden="true"></i>
                                </button>
                            </div>
                            <button 
                                class="cart-action-btn remove-from-cart-btn bg-red-500 hover:bg-red-600 text-white p-2.5 rounded-lg transition-all focus:outline-none focus:ring-2 focus:ring-red-500 shadow hover:shadow-lg transform hover:scale-105 active:scale-95" 
                                data-name="${item.name}"
                                aria-label="Remover ${item.name} do carrinho"
                                title="Remover item">
                                <i class="fa fa-trash" aria-hidden="true"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            cartItemsContainer.appendChild(itemElement);
            totalAmount += item.price * item.quantity;
        });
    }
    
    // Atualizar o valor total no elemento cartTotal
    if (cartTotal) {
        cartTotal.innerText = totalAmount.toFixed(2);
    }
    
    // Atualizar o contador do carrinho (ícone, etc.)
    updateCartInfo();
    
    // Tentar atualizar o resumo do pedido, se a seção existir
    try {
        const orderSummaryContainer = document.getElementById('order-summary-container');
        if (orderSummaryContainer && typeof generateOrderSummary === 'function') {
            orderSummaryContainer.innerHTML = generateOrderSummary();
        }
    } catch (err) {
        console.warn('Erro ao atualizar resumo do pedido:', err);
    }
    
    // Desabilitar botão de checkout se o carrinho estiver vazio
    if (checkoutBtn) {
        if (!cart || cart.length === 0) {
            checkoutBtn.disabled = true;
            checkoutBtn.classList.add('opacity-50', 'cursor-not-allowed');
        } else {
            checkoutBtn.disabled = false;
            checkoutBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        }
    }
}

// Função para gerar o resumo do pedido antes da finalização
function generateOrderSummary() {
    if (!cart || cart.length === 0) {
        // Retornar uma mensagem de carrinho vazio
        return `
            <div class="order-summary rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-6 mb-4 shadow-sm">
                <div class="empty-order-summary flex flex-col items-center justify-center py-6">
                    <div class="bg-orange-100 dark:bg-orange-900/30 p-4 rounded-full mb-4 animate-pulse">
                        <i class="fas fa-clipboard-check text-3xl text-orange-500 dark:text-orange-400"></i>
                    </div>
                    <p class="text-lg font-medium text-gray-700 dark:text-gray-300">Nenhum item no carrinho</p>
                    <p class="text-sm mt-1 max-w-xs text-center text-gray-500 dark:text-gray-400">Adicione itens do cardápio para visualizar seu pedido</p>
                </div>
            </div>
        `;
    }
    
    let summaryHTML = `
        <div class="order-summary rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-4 mb-4 shadow-sm">
            <h4 class="text-lg font-medium mb-3 flex items-center text-gray-800 dark:text-gray-200">
                <i class="fas fa-clipboard-list text-orange-500 mr-2" aria-hidden="true"></i>
                Resumo do Pedido
            </h4>
            
            <div class="order-items-container max-h-64 overflow-y-auto mb-3 pr-1" 
                 style="scrollbar-width: thin; scrollbar-color: #f97316 #e5e7eb;">
                <table class="w-full text-left">
                    <thead class="bg-gray-100 dark:bg-gray-700 sticky top-0 z-10">
                        <tr>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2">Item</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-center w-16">Qtd</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-right">Preço Unit.</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-right">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 dark:divide-gray-600">
    `;
    
    // Adicionar cada item do carrinho ao resumo
    cart.forEach(item => {
        const unitPrice = parseFloat(item.price).toFixed(2);
        const itemTotal = (item.price * item.quantity).toFixed(2);
        
        summaryHTML += `
            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
                <td class="px-3 py-2.5 text-sm text-gray-800 dark:text-gray-200 font-medium">${item.name}</td>
                <td class="px-3 py-2.5 text-sm text-center text-gray-800 dark:text-gray-200 font-medium">${item.quantity}</td>
                <td class="px-3 py-2.5 text-sm text-right text-gray-600 dark:text-gray-400">R$ ${unitPrice}</td>
                <td class="px-3 py-2.5 text-sm text-right text-orange-600 dark:text-orange-400 font-medium">R$ ${itemTotal}</td>
            </tr>
        `;
    });
    
    // Calcular o valor total
    const totalAmount = cart.reduce((total, item) => total + (item.price * item.quantity), 0).toFixed(2);
    
    summaryHTML += `
                    </tbody>
                </table>
            </div>
            
            <div class="flex justify-between items-center border-t border-gray-200 dark:border-gray-700 pt-3 mt-1">
                <span class="font-bold text-base text-gray-700 dark:text-gray-300">Total do Pedido:</span>
                <span class="font-bold text-xl text-orange-600 dark:text-orange-400">R$ ${totalAmount}</span>
            </div>
        </div>
    `;
    
    return summaryHTML;
}

// Função para destacar linha da tabela quando o usuário passar o mouse
function setupOrderSummaryInteraction() {
    const rows = document.querySelectorAll('.order-items-container tbody tr');
    
    rows.forEach(row => {
        // Destacar a linha ao passar o mouse
        row.addEventListener('mouseenter', function() {
            this.classList.add('bg-orange-50', 'dark:bg-orange-900/20');
        });
        
        row.addEventListener('mouseleave', function() {
            this.classList.remove('bg-orange-50', 'dark:bg-orange-900/20');
        });
        
        // Efeito de clique para feedback visual (opcional)
        row.addEventListener('click', function() {
            const itemName = this.querySelector('td:first-child').textContent;
            
            // Flash effect
            this.classList.add('bg-orange-100', 'dark:bg-orange-900/30');
            setTimeout(() => {
                this.classList.remove('bg-orange-100', 'dark:bg-orange-900/30');
            }, 200);
            
            // Anunciar para leitores de tela
            announceScreenReaderMessage(`Item selecionado: ${itemName}`);
        });
    });
}

// Chamar a função de interação da tabela após atualizar o modal do carrinho
function updateCartModal() {
    if (!cartItemsContainer) {
        console.error("O container de itens do carrinho não foi encontrado");
        return;
    }
    
    // Limpar o conteúdo atual do carrinho
    cartItemsContainer.innerHTML = '';
    let totalAmount = 0;
      
    // Adicionar botão "Limpar carrinho" se houver itens
    if (cart && cart.length > 0) {
        const clearCartContainer = document.createElement('div');
        clearCartContainer.className = 'flex justify-end mb-2';
        clearCartContainer.innerHTML = `
            <button 
                id="clear-cart-btn" 
                class="clear-cart-btn text-gray-500 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400 text-sm flex items-center"
                aria-label="Remover todos os itens do carrinho"
                title="Limpar carrinho">
                <i class="fas fa-trash-alt mr-1"></i>
                Limpar carrinho
            </button>
        `;
        cartItemsContainer.appendChild(clearCartContainer);
        
        // Adicionar evento ao botão de limpar carrinho
        const clearBtn = document.getElementById('clear-cart-btn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                clearCart();
            });
        }
    }
    
    if (!cart || cart.length === 0) {
        // Mensagem para carrinho vazio com estilo consistente
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'empty-cart-indicator flex flex-col items-center justify-center py-8 text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded-lg border border-dashed border-gray-300 dark:border-gray-700 animate-fade-in';
        emptyMessage.innerHTML = `
            <div class="bg-orange-100 dark:bg-orange-900/30 p-4 rounded-full mb-4">
                <i class="fas fa-shopping-cart text-4xl text-orange-500 dark:text-orange-400"></i>
            </div>
            <p class="text-lg font-medium">Seu carrinho está vazio</p>
            <p class="text-sm mt-1 max-w-xs text-center">Adicione itens do cardápio para fazer seu pedido</p>
            <button class="mt-4 px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors" 
                onclick="closeCartModal()" aria-label="Continuar comprando">
                <i class="fas fa-utensils mr-2"></i>Ver cardápio
            </button>
        `;
        cartItemsContainer.appendChild(emptyMessage);
    } else {
        cart.forEach(item => {
            const itemElement = document.createElement('div');
            // Aplicar estilos consistentes aos itens do carrinho com classes melhoradas
            itemElement.className = 'cart-item flex gap-4 p-4 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 mb-4 shadow-md hover:shadow-xl transition-all';
            itemElement.setAttribute('data-name', item.name);
            
            // Determinar qual imagem mostrar com base no nome do item
            let imageSrc = './assets/pastel.jpg';
            let imageAlt = 'Pastel';
            
            if (item.name.toLowerCase().includes('coca') || item.name.toLowerCase().includes('cola')) {
                imageSrc = './assets/refri-1.png';
                imageAlt = 'Coca-Cola';
            } else if (item.name.toLowerCase().includes('guaran') || item.name.toLowerCase().includes('soda') || 
                      item.name.toLowerCase().includes('refri')) {
                imageSrc = './assets/refri-2.png';
                imageAlt = 'Refrigerante';
            } else if (item.name.toLowerCase().includes('cuscuz')) {
                imageSrc = './assets/cuscuz.jpg';
                imageAlt = 'Cuscuz';
            }
            
            // HTML melhorado para os itens do carrinho
            itemElement.innerHTML = `
                <div class="relative cart-image-container">
                    <img 
                        src="${imageSrc}" 
                        alt="${imageAlt}" 
                        class="cart-item-image w-24 h-24 md:w-28 md:h-28 object-cover rounded-md shadow-md"
                        loading="lazy"
                    />
                    <span class="absolute -top-2 -right-2 bg-orange-500 text-white w-6 h-6 flex items-center justify-center rounded-full text-xs font-bold shadow-sm">
                        ${item.quantity}
                    </span>
                </div>
                <div class="w-full">
                    <h4 class="font-bold text-lg text-gray-900 dark:text-gray-100">${item.name}</h4>
                    <p class="text-sm text-gray-600 dark:text-gray-300">Preço unitário: <span class="font-medium">R$ ${parseFloat(item.price).toFixed(2)}</span></p>
                    
                    <div class="flex items-center gap-2 justify-between mt-3">
                        <p class="font-bold text-lg text-orange-600 dark:text-orange-400">
                            Total: R$ ${(item.price * item.quantity).toFixed(2)}
                        </p>
                        <div class="flex items-center gap-3">
                            <div class="cart-quantity-control flex items-center bg-gray-100 dark:bg-gray-700 rounded-lg shadow-sm border border-gray-200 dark:border-gray-600" role="group" aria-label="Ajustar quantidade de ${item.name}">
                                <button 
                                    class="cart-action-btn px-3 py-2 text-orange-600 dark:text-orange-400 cart-quantity-btn hover:bg-gray-200 dark:hover:bg-gray-600 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-orange-500 font-bold" 
                                    data-action="decrease"
                                    data-name="${item.name}"
                                    aria-label="Diminuir quantidade de ${item.name}"
                                    title="Diminuir quantidade">
                                    <i class="fas fa-minus" aria-hidden="true"></i>
                                </button>
                                <span class="cart-quantity-display px-4 py-1 font-bold text-base" aria-live="polite">${item.quantity}</span>
                                <button 
                                    class="cart-action-btn px-3 py-2 text-orange-600 dark:text-orange-400 cart-quantity-btn hover:bg-gray-200 dark:hover:bg-gray-600 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-orange-500 font-bold" 
                                    data-action="increase"
                                    data-name="${item.name}"
                                    aria-label="Aumentar quantidade de ${item.name}"
                                    title="Aumentar quantidade">
                                    <i class="fas fa-plus" aria-hidden="true"></i>
                                </button>
                            </div>
                            <button 
                                class="cart-action-btn remove-from-cart-btn bg-red-500 hover:bg-red-600 text-white p-2.5 rounded-lg transition-all focus:outline-none focus:ring-2 focus:ring-red-500 shadow hover:shadow-lg transform hover:scale-105 active:scale-95" 
                                data-name="${item.name}"
                                aria-label="Remover ${item.name} do carrinho"
                                title="Remover item">
                                <i class="fa fa-trash" aria-hidden="true"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            cartItemsContainer.appendChild(itemElement);
            totalAmount += item.price * item.quantity;
        });
    }
    
    // Atualizar o valor total no elemento cartTotal
    if (cartTotal) {
        cartTotal.innerText = totalAmount.toFixed(2);
    }
    
    // Atualizar o contador do carrinho (ícone, etc.)
    updateCartInfo();
    
    // Tentar atualizar o resumo do pedido, se a seção existir
    try {
        const orderSummaryContainer = document.getElementById('order-summary-container');
        if (orderSummaryContainer && typeof generateOrderSummary === 'function') {
            orderSummaryContainer.innerHTML = generateOrderSummary();
        }
    } catch (err) {
        console.warn('Erro ao atualizar resumo do pedido:', err);
    }
    
    // Desabilitar botão de checkout se o carrinho estiver vazio
    if (checkoutBtn) {
        if (!cart || cart.length === 0) {
            checkoutBtn.disabled = true;
            checkoutBtn.classList.add('opacity-50', 'cursor-not-allowed');
        } else {
            checkoutBtn.disabled = false;
            checkoutBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        }
    }
}

// Função para gerar o resumo do pedido antes da finalização
function generateOrderSummary() {
    if (!cart || cart.length === 0) {
        // Retornar uma mensagem de carrinho vazio
        return `
            <div class="order-summary rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-6 mb-4 shadow-sm">
                <div class="empty-order-summary flex flex-col items-center justify-center py-6">
                    <div class="bg-orange-100 dark:bg-orange-900/30 p-4 rounded-full mb-4 animate-pulse">
                        <i class="fas fa-clipboard-check text-3xl text-orange-500 dark:text-orange-400"></i>
                    </div>
                    <p class="text-lg font-medium text-gray-700 dark:text-gray-300">Nenhum item no carrinho</p>
                    <p class="text-sm mt-1 max-w-xs text-center text-gray-500 dark:text-gray-400">Adicione itens do cardápio para visualizar seu pedido</p>
                </div>
            </div>
        `;
    }
    
    let summaryHTML = `
        <div class="order-summary rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-4 mb-4 shadow-sm">
            <h4 class="text-lg font-medium mb-3 flex items-center text-gray-800 dark:text-gray-200">
                <i class="fas fa-clipboard-list text-orange-500 mr-2" aria-hidden="true"></i>
                Resumo do Pedido
            </h4>
            
            <div class="order-items-container max-h-64 overflow-y-auto mb-3 pr-1" 
                 style="scrollbar-width: thin; scrollbar-color: #f97316 #e5e7eb;">
                <table class="w-full text-left">
                    <thead class="bg-gray-100 dark:bg-gray-700 sticky top-0 z-10">
                        <tr>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2">Item</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-center w-16">Qtd</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-right">Preço Unit.</th>
                            <th scope="col" class="text-sm font-semibold text-gray-700 dark:text-gray-300 px-3 py-2 text-right">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 dark:divide-gray-600">
    `;
    
    // Adicionar cada item do carrinho ao resumo
    cart.forEach(item => {
        const unitPrice = parseFloat(item.price).toFixed(2);
        const itemTotal = (item.price * item.quantity).toFixed(2);
        
        summaryHTML += `
            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
                <td class="px-3 py-2.5 text-sm text-gray-800 dark:text-gray-200 font-medium">${item.name}</td>
                <td class="px-3 py-2.5 text-sm text-center text-gray-800 dark:text-gray-200 font-medium">${item.quantity}</td>
                <td class="px-3 py-2.5 text-sm text-right text-gray-600 dark:text-gray-400">R$ ${unitPrice}</td>
                <td class="px-3 py-2.5 text-sm text-right text-orange-600 dark:text-orange-400 font-medium">R$ ${itemTotal}</td>
            </tr>
        `;
    });
    
    // Calcular o valor total
    const totalAmount = cart.reduce((total, item) => total + (item.price * item.quantity), 0).toFixed(2);
    
    summaryHTML += `
                    </tbody>
                </table>
            </div>
            
            <div class="flex justify-between items-center border-t border-gray-200 dark:border-gray-700 pt-3 mt-1">
                <span class="font-bold text-base text-gray-700 dark:text-gray-300">Total do Pedido:</span>
                <span class="font-bold text-xl text-orange-600 dark:text-orange-400">R$ ${totalAmount}</span>
            </div>
        </div>
    `;
    
    return summaryHTML;
}

// Evento melhorado para controlar a quantidade no carrinho
if (cartItemsContainer) {
    cartItemsContainer.addEventListener("click", function(event) {
        const button = event.target.closest('.cart-quantity-btn');
        if (button) {
            const action = button.dataset.action;
            const name = button.dataset.name;
            const item = cart.find(item => item.name === name);
            
            if (item) {
                let wasRemoved = false;
                let oldQuantity = item.quantity;
                
                if (action === 'increase') {
                    if (item.quantity < 20) { // Limite aumentado
                        item.quantity++;
                        
                        // Feedback visual do botão
                        button.classList.add('ring-2', 'ring-orange-500');
                        setTimeout(() => button.classList.remove('ring-2', 'ring-orange-500'), 300);
                        
                        // Feedback sonoro sutil
                        playFeedbackSound('add');
                    } else {
                        // Feedback quando atinge o máximo
                        Toastify({
                            text: `Máximo de 20 itens por produto`,
                            duration: 2000,
                            gravity: "top", 
                            position: "center",
                            style: {
                                background: "#f97316",
                            }
                        }).showToast();
                    }
                } else if (action === 'decrease') {
                    if (item.quantity > 1) {
                        item.quantity--;
                        
                        // Feedback visual do botão
                        button.classList.add('ring-2', 'ring-orange-500');
                        setTimeout(() => button.classList.remove('ring-2', 'ring-orange-500'), 300);
                    } else {
                        // Se a quantidade chegar a 0, pergunta antes de remover
                        const cartItem = button.closest('.cart-item');
                        if (cartItem) {
                            cartItem.classList.add('cart-item-removing');
                            wasRemoved = true;
                            
                            // Aguardar a animação antes de remover
                            setTimeout(() => {
                                removeItemCart(name);
                            }, 500);
                        }
                    }
                }
                
                if (!wasRemoved) {
                    // Atualizar carrinho no localStorage e a interface
                    item.total = item.quantity * item.price; // Atualizar o total do item
                    localStorage.setItem('cart', JSON.stringify(cart));
                    
                    // Atualizar apenas o display de quantidade e total em vez do modal inteiro
                    const cartItem = button.closest('.cart-item');
                    if (cartItem) {
                        const quantityDisplay = cartItem.querySelector('.cart-quantity-display');
                        const totalElement = cartItem.querySelector('p.font-bold.text-base');
                        
                        if (quantityDisplay) {
                            quantityDisplay.textContent = item.quantity;
                            quantityDisplay.classList.add('highlight');
                            setTimeout(() => quantityDisplay.classList.remove('highlight'), 500);
                        }
                        
                        if (totalElement) {
                            totalElement.textContent = `Total: R$ ${(item.price * item.quantity).toFixed(2)}`;
                        }
                        
                        // Atualizar o valor total e o contador
                        updateCartInfo();
                        let totalAmount = cart.reduce((sum, cartItem) => sum + (cartItem.price * cartItem.quantity), 0);
                        cartTotal.innerText = totalAmount.toFixed(2);
                    } else {
                        // Fallback: atualizar todo o modal
                        updateCartModal();
                    }
                    
                    // Anunciar para leitores de tela
                    const message = `Quantidade de ${name} atualizada para ${item.quantity}`;
                    announceScreenReaderMessage(message);
                }
            }
        }
    });
}

// Evento para o botão de remover item - versão corrigida e melhorada
if (cartItemsContainer) {
    cartItemsContainer.addEventListener("click", function(event) {
        // Verifica se o clique ocorreu no botão de remover ou em um filho dele (o ícone)
        const removeButton = event.target.closest('.remove-from-cart-btn');
        if (removeButton) {
            const name = removeButton.dataset.name;
            
            // Primeiro aplica a animação de remoção
            const cartItem = removeButton.closest('.cart-item');
            if (cartItem) {
                // Adiciona a classe para iniciar a animação
                cartItem.classList.add('cart-item-removing');
                
                // Desabilita o botão durante a animação para evitar cliques múltiplos
                removeButton.disabled = true;
                removeButton.classList.add('opacity-50');
                
                // Aguarda o fim da animação antes de remover efetivamente
                setTimeout(() => {
                    removeItemCart(name);
                    
                    // Feedback visual com Toastify
                    Toastify({
                        text: `${name} removido do carrinho!`,
                        duration: 3000,
                        gravity: "bottom",
                        position: "right",
                        style: {
                            background: "#ef4444",
                            boxShadow: "0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)"
                        }
                    }).showToast();
                    
                    // Feedback sonoro para acessibilidade
                    playFeedbackSound('remove');
                }, 500); // Tempo da animação
            } else {
                // Fallback se não encontrou o elemento pai
                removeItemCart(name);
            }
        }
    });
}

// Modifique a função removeItemCart para remover o item completamente
function removeItemCart(name) {
    const index = cart.findIndex(item => item.name === name);
    if (index !== -1) {
        cart.splice(index, 1);
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartModal();
        
        // Anunciar para leitores de tela
        announceScreenReaderMessage(`${name} removido do carrinho.`);
        
        // Animar o contador do carrinho
        animateCartCounter();
    }
}

// Função para limpar o carrinho completamente
function clearCart() {
    // Confirmação visual antes de limpar
    if (cart.length > 0) {
        // Aplicar animação a todos os itens
        const cartItems = document.querySelectorAll('.cart-item');
        cartItems.forEach(item => {
            item.classList.add('cart-item-removing');
        });
        
        setTimeout(() => {
            // Limpar o array do carrinho
            cart = [];
            localStorage.setItem('cart', JSON.stringify(cart));
            updateCartModal();
            
            // Feedback visual e sonoro
            Toastify({
                text: "Carrinho limpo com sucesso!",
                duration: 3000,
                gravity: "top",
                position: "center",
                style: {
                    background: "#4b5563",
                }
            }).showToast();
            
            // Anúncio para leitores de tela
            announceScreenReaderMessage("Todos os itens foram removidos do carrinho.");
            
            // Animar o contador do carrinho
            animateCartCounter();
            
            // Feedback sonoro
            playFeedbackSound('clear');
        }, 500); // Tempo da animação
    }
}

// Função para animar o contador do carrinho
function animateCartCounter() {
    if (cartCounter) {
        cartCounter.classList.add('cart-count-updating');
        setTimeout(() => {
            cartCounter.classList.remove('cart-count-updating');
        }, 500);
    }
}

// Função melhorada para tocar sons de feedback (acessibilidade)
function playFeedbackSound(type) {
    // Verificar se o navegador suporta a API de áudio
    if (!window.AudioContext && !window.webkitAudioContext) {
        return; // Sai silenciosamente se não há suporte
    }

    try {
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioCtx.createOscillator();
        const gainNode = audioCtx.createGain();
        
        // Sons mais agradáveis e sutis para diferentes ações
        switch(type) {
            case 'remove':
                // Som de remoção - mais grave e curto
                oscillator.type = 'sine';
                oscillator.frequency.value = 320;
                gainNode.gain.value = 0.08;
                
                const now = audioCtx.currentTime;
                oscillator.frequency.setValueAtTime(320, now);
                oscillator.frequency.linearRampToValueAtTime(280, now + 0.2);
                gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.3);
                break;
            
            case 'add':
                // Som de adição - mais agudo e alegre
                oscillator.type = 'sine';
                oscillator.frequency.value = 520;
                gainNode.gain.value = 0.08;
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.3);
                break;
                
            case 'clear':
                // Som completo para limpar carrinho - duas notas descendentes
                oscillator.type = 'sine';
                oscillator.frequency.value = 440;
                gainNode.gain.value = 0.08;
                
                // Criar uma sequência de duas notas
                const clearTime = audioCtx.currentTime;
                oscillator.frequency.setValueAtTime(440, clearTime);
                oscillator.frequency.setValueAtTime(330, clearTime + 0.15);
                
                // Reduzir o volume gradualmente
                gainNode.gain.setValueAtTime(0.08, clearTime);
                gainNode.gain.exponentialRampToValueAtTime(0.001, clearTime + 0.4);
                break;
                
            case 'success':
                // Som de sucesso - duas notas ascendentes
                oscillator.type = 'sine'; 
                oscillator.frequency.value = 440;
                gainNode.gain.value = 0.08;
                
                const successTime = audioCtx.currentTime;
                oscillator.frequency.setValueAtTime(440, successTime);
                oscillator.frequency.setValueAtTime(660, successTime + 0.15);
                
                gainNode.gain.setValueAtTime(0.08, successTime);
                gainNode.gain.exponentialRampToValueAtTime(0.001, successTime + 0.4);
                break;
                
            default:
                oscillator.type = 'sine';
                oscillator.frequency.value = 400;
                gainNode.gain.value = 0.08;
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.2);
        }
        
        // Conectar nós de áudio
        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);
        
        // Determinar duração com base no tipo
        const duration = (type === 'clear' || type === 'success') ? 0.5 : 0.3;
        
        // Tocar som
        oscillator.start();
        
        // Parar depois do período definido
        setTimeout(() => {
            oscillator.stop();
        }, duration * 1000);
    } catch (e) {
        // Fallback silencioso se não suportar AudioContext
        console.log("Feedback sonoro não suportado neste navegador");
    }
}

// Validação de campos do formulário
// Validações de formulário
if (addressInput) {
    addressInput.addEventListener("input", function(event){
        let inputValue = event.target.value;

        if(inputValue !== ""){
            addressInput.classList.remove("border-red-500");
            addressInput.setAttribute("aria-invalid", "false");
            if (addressWarn) addressWarn.classList.add("hidden");
        }
    });
}

if (paymentMethod) {
    paymentMethod.addEventListener("change", function(event){
        if(event.target.value !== ""){
            paymentMethod.classList.remove("border-red-500");
            paymentMethod.setAttribute("aria-invalid", "false");
            if (paymentWarn) paymentWarn.classList.add("hidden");
        }
    });
}

// Finalizar pedido
if (checkoutBtn) {
    checkoutBtn.addEventListener("click", function(){
    // Verificar se o restaurante está aberto
    const isOpen = checkRestaurantOpen();
    if(!isOpen){
        Toastify({
            text: "Ops! O restaurante está fechado no momento!",
            duration: 3000,
            close: true,
            gravity: "top",
            position: "center",
            stopOnFocus: true,
            style: {
                background: "#ef4444",
            },
        }).showToast();
        
        announceScreenReaderMessage("O restaurante está fechado no momento. Tente novamente no horário de funcionamento.");
        return;
    }

    // Verificar se há itens no carrinho
    if(cart.length === 0) {
        announceScreenReaderMessage("O carrinho está vazio. Adicione itens antes de finalizar o pedido.");
        return;
    }

    // Validar formulário
    let hasError = false;
    
    // Validar endereço
    if(addressInput.value.trim() === ""){
        addressWarn.classList.remove("hidden");
        addressInput.classList.add("border-red-500");
        addressInput.setAttribute("aria-invalid", "true");
        addressInput.focus();
        hasError = true;
    }
    
    // Validar método de pagamento
    if(paymentMethod.value.trim() === ""){
        paymentWarn.classList.remove("hidden");
        paymentMethod.classList.add("border-red-500");
        paymentMethod.setAttribute("aria-invalid", "true");
        if (!hasError) {
            paymentMethod.focus();
        }
        hasError = true;
    }
    
    if(hasError) {
        announceScreenReaderMessage("Preencha todos os campos obrigatórios antes de finalizar o pedido.");
        return;
    }

    // Preparar dados do pedido formatados
    let pedidoTexto = "🛒 *NOVO PEDIDO* 🛒\n\n";
    pedidoTexto += "📋 *ITENS DO PEDIDO:*\n";
    
    cart.forEach(item => {
        pedidoTexto += `• ${item.quantity}x ${item.name} - R$ ${(item.price * item.quantity).toFixed(2)}\n`;
    });
    
    pedidoTexto += "\n💰 *TOTAL:* R$ " + cartTotal.innerText + "\n\n";
    pedidoTexto += "🏠 *ENDEREÇO DE ENTREGA:*\n" + addressInput.value.trim() + "\n\n";
    pedidoTexto += "💳 *FORMA DE PAGAMENTO:*\n" + paymentMethod.options[paymentMethod.selectedIndex].text;

    const message = encodeURIComponent(pedidoTexto);
    const phone = "557981575934";
    
    // Notificação de confirmação
    Toastify({
        text: "Pedido finalizado! Redirecionando para o WhatsApp...",
        duration: 3000,
        close: true,
        gravity: "top",
        position: "center",
        style: {
            background: "linear-gradient(to right, #00b09b, #96c93d)",
        },
    }).showToast();
    
    announceScreenReaderMessage("Pedido finalizado com sucesso! Redirecionando para o WhatsApp.");

    // Abrir WhatsApp com pequeno delay para permitir que a notificação seja lida
    setTimeout(() => {
        window.open(`https://wa.me/${phone}?text=${message}`, "_blank");
        
        // Limpar carrinho após finalizar pedido
        cart = [];
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartModal();
          // Fechar modal após finalizar
        closeCartModal();    }, 1500);
        
        });
    }

// Verificação de funcionamento do restaurante
function checkRestaurantOpen(){
    const data = new Date();
    const dia = data.getDay(); // 0 (Domingo) - 6 (Sábado)
    const hora = data.getHours();
    
    // Fechado às segundas (dia 1)
    if (dia === 1) {
        return false;
    }
    
    // Aberto das 16h às 22h nos outros dias
    return hora >= 16 && hora < 22; 
}

// Atualiza o status de funcionamento do restaurante
function updateRestaurantStatus() {
    const spanItem = document.getElementById("date-span");
    if (!spanItem) return;
    
    const isOpen = checkRestaurantOpen();
    
    // Mudar apenas a cor de fundo do elemento sem alterar o conteúdo
    if(isOpen){
        spanItem.classList.remove("bg-red-600");
        spanItem.classList.add("bg-green-600");
    } else {
        spanItem.classList.remove("bg-green-600");
        spanItem.classList.add("bg-red-600");
    }
    
    // Atualiza o atributo aria-label para acessibilidade
    const statusText = isOpen ? "Estabelecimento aberto agora" : "Estabelecimento fechado agora";
    spanItem.setAttribute('aria-label', `Horário de funcionamento: Terça à Domingo das 16:00 às 22:00. ${statusText}`);
}

// Inicializa status do restaurante
updateRestaurantStatus();

// Atualiza o status a cada minuto
setInterval(updateRestaurantStatus, 60000);
